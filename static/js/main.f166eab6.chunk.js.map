{"version":3,"sources":["components/Header.jsx","components/Attribute.jsx","components/Display.jsx","components/ToggleButtons.jsx","components/Boosts.jsx","components/Footer.jsx","components/CustomSwitch.jsx","tabs/Smithing.jsx","tabs/Crafting.jsx","tabs/Cooking.jsx","tabs/Tailoring.jsx","tabs/Fletching.jsx","tabs/Mining.jsx","tabs/Woodcutting.jsx","tabs/Fishing.jsx","tabs/Combat.jsx","tabs/Alchemy.jsx","Home.jsx","App.js","index.js"],"names":["Header","title","currentTheme","updateTheme","AppBar","position","Toolbar","Typography","variant","color","noWrap","Attribute","maxValue","attributeName","updateAttribute","updateAttribute2","isCurrentLevel","React","useState","attribute","setAttribute","attribute2","setAttribute2","Box","sx","display","alignItems","justifyContent","TextField","label","type","value","onFocus","event","target","select","onChange","currentValue","newValue","finalValue","Math","floor","checkAndUpdateValue","valueAsNumber","margin","maxWidth","minWidth","InputProps","endAdornment","InputAdornment","onBlur","console","log","Number","isNaN","checkAndUpdateValue2","Display","level","levelPercentage","targetLevel","element","boosts","keywords","applyBoostOnSmelt","buyOrSmeltBars","skill","lolliPrice","expGap","setExpGap","addCommas","num","toString","replace","calculateElementXpBoost","elementXP","i","length","active","useEffect","currentLevelExp","parseInt","expData","targetLevelExp","ceil","flexWrap","parseFloat","List","dense","ListItem","ListItemText","primary","secondary","Object","keys","map","subelement","StyledToggleButtonGroup","styled","ToggleButtonGroup","theme","borderColor","borderRadius","spacing","shape","ToggleButtons","updateElement","skillsData","currentLevel","selectedElement","setSelectedElement","handleChange","newElement","currentTarget","createCombatButtons","levelRange","marginBottom","marginLeft","marginRight","Accordion","AccordionSummary","expandIcon","id","AccordionDetails","size","exclusive","padding","ToggleButton","onClick","src","process","width","height","alt","undefined","marginTop","disabled","Boosts","updateBoosts","selectedBoost","setSelectedBoost","boostName","boostsCopy","name","boost","Footer","component","Container","align","Link","href","rel","Date","getFullYear","Div","typography","button","CustomSwitch","updateValue","falseText","trueText","Grid","container","flexGrow","item","Switch","checked","Smithing","setCurrentLevel","currentPercentage","setCurrentPercentage","setTargetLevel","setElement","boostsDidUpdate","setBoostDidUpdate","setBoosts","setBuyOrSmeltBars","artisanData","Crafting","updatedBoostName","Cooking","Tailoring","Fletching","Mining","gatheringData","Woodcutting","Fishing","setLolliPrice","selectFishOrBait","setSelectFishOrBait","Combat","monster","setMonster","Alert","severity","monsterData","Alchemy","Home","props","match","history","updateCurrentTheme","page","params","tabNameToIndex","smithing","crafting","cooking","tailoring","mining","woodcutting","fishing","combat","selectedTab","setSelectedTab","borderBottom","Tabs","push","Tab","App","exact","from","to","path","render","createTheme","palette","mode","rootElement","document","getElementById","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.f166eab6.chunk.js","sourcesContent":["import AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n// import IconButton from '@mui/material/IconButton';\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst Header = ( {title, currentTheme, updateTheme} ) => {\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          {title}\n          {/* <IconButton\n            sx={{ ml: 1 }}\n            onClick={updateTheme}\n            color=\"inherit\"\n          >\n            {currentTheme === \"dark\" ? (\n              <Brightness7Icon />\n            ) : (\n              <Brightness4Icon />\n            )}\n          </IconButton> */}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n// import { styled } from \"@mui/material/styles\";\n// import Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nconst Attribute = ({\n  maxValue,\n  attributeName,\n  updateAttribute,\n  updateAttribute2,\n  isCurrentLevel,\n}) => {\n  const [attribute, setAttribute] = React.useState(null);\n  const [attribute2, setAttribute2] = React.useState(0);\n\n  const checkAndUpdateValue = (currentValue, newValue) => {\n    let finalValue;\n    newValue = Math.floor(newValue);\n    // console.log(currentValue, newValue);\n    // Check if value is above minimum or equal to undefined (when input is empty)\n    if (newValue > 0 || newValue === null) {\n      // Check if value is less than maximum\n      if (currentValue > maxValue || newValue >= maxValue) {\n        finalValue = maxValue;\n        setAttribute(maxValue);\n      } else {\n        finalValue = newValue;\n        setAttribute(finalValue);\n      }\n    } else if (newValue < 0) {\n      // console.log(newValue);\n      finalValue = 0;\n      setAttribute(0);\n    } else {\n      setAttribute(newValue);\n      finalValue = newValue;\n    }\n    // Update parent component attribute and attribute 2\n    updateAttribute(finalValue);\n  };\n\n  const checkAndUpdateValue2 = (currentValue, newValue, maxValue) => {\n    let finalValue;\n    // console.log('maxValue:', maxValue);\n    // console.log('maxValue:', maxValue);\n    newValue = Math.floor(newValue);\n    // console.log(currentValue, newValue);\n    // Check if value is above minimum or equal to undefined (when input is empty)\n    if (newValue > 0 || newValue === null) {\n      // Check if value is less than maximum\n      if (currentValue > maxValue || newValue >= maxValue) {\n        finalValue = maxValue;\n        setAttribute2(maxValue);\n      } else {\n        finalValue = newValue;\n        setAttribute2(finalValue);\n      }\n    } else if (newValue < 0) {\n      // console.log(newValue);\n      finalValue = 0;\n      setAttribute2(0);\n    } else {\n      setAttribute2(newValue);\n      finalValue = newValue;\n    }\n    // Update parent component attribute 2\n    updateAttribute2(finalValue);\n  };\n\n  const checkIfNaN = (value) => {\n    console.log(\"Value: \", value);\n    if (Number.isNaN(value)) {\n      // Update attribute 2\n      setAttribute2(0);\n      // Update parent component attribute 2\n      updateAttribute2(0);\n    }\n    // else {\n    //   // Update parent component attribute 2\n    //   updateAttribute2(value);\n    // }\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {/* <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          className={styles.button}\n          // href=\"#outlined-buttons\"\n          onClick={() => {\n            checkAndUpdateValue(attribute, attribute - 1, true);\n            // setAttribute(newAttribute);\n            // updateAttribute(newAttribute);\n          }}\n        >\n          -\n        </Button> */}\n        <TextField\n          label={attributeName}\n          type=\"number\"\n          // defaultValue=\"1\"\n          value={attribute}\n          onFocus={(event) => {\n            event.target.select();\n          }}\n          // Remove initial zero\n          // value={('' + attribute).replace(/^0+/, '')}\n          onChange={function (event) {\n            checkAndUpdateValue(attribute, event.target.valueAsNumber);\n            // updateAttribute(newAttribute);\n          }}\n          sx={{\n            \"& > :not(style)\": {\n              margin: 1,\n              // marginTop: 3,\n              maxWidth: \"25ch\",\n              minWidth: \"25ch\",\n            },\n            // display: flex,\n            // \"justify-content\": center,\n            // \"align-items\": center,\n            // alignItems: \"center\",\n          }}\n        />\n        {isCurrentLevel ? (\n          <TextField\n            // label=\"\"\n            type=\"number\"\n            // defaultValue=\"0\"\n            value={attribute2}\n            InputProps={{\n              endAdornment: <InputAdornment>%</InputAdornment>,\n            }}\n            onFocus={(event) => {\n              event.target.select();\n            }}\n            // onBlur={checkIfNaN(event.target.valueAsNumber)}\n            onBlur={function (event) {\n              checkIfNaN(event.target.valueAsNumber);\n              // updateAttribute(newAttribute);\n            }}\n            // Remove initial zero\n            // value={('' + attribute).replace(/^0+/, '')}\n            onChange={function (event) {\n              checkAndUpdateValue2(attribute2, event.target.valueAsNumber, 99);\n              // updateAttribute(newAttribute);\n            }}\n            sx={{\n              \"& > :not(style)\": {\n                margin: 1,\n                // marginTop: 3,\n                // width: \"69ch\",\n                minWidth: \"8ch\",\n                maxWidth: \"8ch\",\n              },\n              // display: flex,\n              // \"justify-content\": center,\n              // \"align-items\": center,\n              // alignItems: \"center\",\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        {/* <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          className={styles.button}\n          // href=\"#outlined-buttons\"\n          onClick={() => {\n            checkAndUpdateValue(attribute, attribute + 1, true);\n            // setAttribute(newAttribute);\n            // updateAttribute(newAttribute);\n          }}\n        >\n          +\n        </Button> */}\n      </Box>\n    </>\n  );\n};\n\nexport default Attribute;\n","import React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport expData from \"../data/exp_data.json\";\n\nconst Display = ({\n  level,\n  levelPercentage,\n  targetLevel,\n  element,\n  boosts,\n  keywords,\n  applyBoostOnSmelt,\n  buyOrSmeltBars,\n  skill,\n  lolliPrice,\n}) => {\n  const [expGap, setExpGap] = React.useState(0);\n\n  const addCommas = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const calculateElementXpBoost = (elementXP) => {\n    for (let i = 0; i < boosts.length; i++) {\n      if (boosts[i].active) {\n        elementXP *= boosts[i].value;\n      }\n    }\n    return Math.floor(elementXP);\n  };\n\n  React.useEffect(() => {\n    const currentLevelExp = parseInt(expData[level]) + (parseInt(expData[level + 1]) - parseInt(expData[level])) * levelPercentage;\n    const targetLevelExp = expData[targetLevel];\n    setExpGap(Math.ceil(targetLevelExp - currentLevelExp));\n    // eslint-disable-next-line\n  }, [expData, level, targetLevel, levelPercentage]);\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n        }}\n      >\n        {expGap <= 0 || isNaN(parseFloat(expGap)) ? (\n          <></>\n        ) : (\n          <List dense={true}>\n            <ListItem>\n              <ListItemText primary={\"Total exp: \" + addCommas(expGap)} secondary=\"\" />\n            </ListItem>\n            <ListItem>\n              {/* Render total number of selected attribute */}\n              {/* Render empty component if no element is selected */}\n              {element[0] === \"loading\" ? (\n                <></>\n              ) : skill === \"Combat\" ? (\n                <ListItemText\n                  primary={\n                    \"Total \" +\n                    element[0] +\n                    \": \" +\n                    addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]))) +\n                    \" (\" +\n                    element[1][\"xp\"] +\n                    \" exp per kill)\"\n                  }\n                />\n              ) : skill === \"Smithing\" ? (\n                // Render results for Smithing\n                buyOrSmeltBars ? (\n                  // Don't include smelting XP\n                  // Exception for Naturite and other resources that don't forge\n\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp-smith\"])))\n                    }\n                  />\n                ) : applyBoostOnSmelt ? (\n                  // Include and apply Boosts on bar Smelting\n                  // Exception for Naturite and other resources that don't forge\n                  element[1][\"xp-smith\"] === \"0\" ? (\n                    <></>\n                  ) : (\n                    <ListItemText\n                      primary={\n                        \"Total \" +\n                        element[0] +\n                        \" \" +\n                        keywords[0] +\n                        \": \" +\n                        addCommas(\n                          Math.ceil(\n                            expGap / (calculateElementXpBoost(element[1][\"xp-smith\"]) + calculateElementXpBoost(element[1][\"xp-smelt\"]))\n                          )\n                        )\n                      }\n                    />\n                  )\n                ) : (\n                  // Include but don't apply Boosts on bar Smelting\n                  // Exception for Naturite and other resources that don't forge\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(Math.ceil(expGap / (calculateElementXpBoost(element[1][\"xp-smith\"]) + parseFloat(element[1][\"xp-smelt\"]))))\n                    }\n                  />\n                )\n              ) : skill === \"Crafting\" ? (\n                // Render results for Crafting\n                // Cursed relics exception\n                element[0] === \"Cursed\" ? (\n                  // <>\n                  <ListItemText\n                    primary={\"Total \" + element[0] + \" Relics: \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"])))}\n                  />\n                ) : (\n                  // <>\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      keywords[0] +\n                      \" \" +\n                      element[0] +\n                      \": \" +\n                      addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"])))\n                    }\n                  />\n                )\n              ) : (\n                // Render results for Cooking\n                <ListItemText\n                  primary={\n                    \"Total \" +\n                    keywords[0] +\n                    \" \" +\n                    element[0] +\n                    \": \" +\n                    addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"])))\n                  }\n                />\n              )}\n            </ListItem>\n\n            {/* Render subelements */}\n            {element[0] === \"loading\" ? (\n              <></>\n            ) : skill === \"Combat\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Total gold: \" +\n                    addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"])) * element[1][\"gold\"]) +\n                    \" (\" +\n                    element[1][\"gold\"] +\n                    \" gold per kill)\"\n                  }\n                />\n              </ListItem>\n            ) : (\n              Object.keys(element[1][\"submaterials\"]).map((subelement) => (\n                <ListItem>\n                  {skill === \"Smithing\" ? (\n                    // Don't include smelting XP\n                    buyOrSmeltBars ? (\n                      // Exception for Naturite and other resources that don't forge\n                      element[1][\"xp-smith\"] === \"0\" ? (\n                        <ListItemText\n                          primary={\n                            \"Total \" +\n                            subelement +\n                            \": \" +\n                            addCommas(\n                              Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp-smelt\"])) * element[1][\"submaterials\"][subelement]\n                            )\n                          }\n                        />\n                      ) : (\n                        <ListItemText\n                          primary={\n                            \"Total \" +\n                            subelement +\n                            \": \" +\n                            addCommas(\n                              Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp-smith\"])) * element[1][\"submaterials\"][subelement]\n                            )\n                          }\n                        />\n                      )\n                    ) : applyBoostOnSmelt ? (\n                      // Include AND boost Smelting XP\n                      <ListItemText\n                        primary={\n                          \"Total \" +\n                          subelement +\n                          \": \" +\n                          addCommas(\n                            Math.ceil(\n                              expGap / (calculateElementXpBoost(element[1][\"xp-smith\"]) + calculateElementXpBoost(element[1][\"xp-smelt\"]))\n                            ) * element[1][\"submaterials\"][subelement]\n                          )\n                        }\n                      />\n                    ) : (\n                      // Include but DO NOT boost Smelting XP\n                      <ListItemText\n                        primary={\n                          \"Total \" +\n                          subelement +\n                          \": \" +\n                          addCommas(\n                            Math.ceil(expGap / (calculateElementXpBoost(element[1][\"xp-smith\"]) + parseFloat(element[1][\"xp-smelt\"]))) *\n                              element[1][\"submaterials\"][subelement]\n                          )\n                        }\n                      />\n                    )\n                  ) : (\n                    <>\n                      <ListItemText\n                        primary={\n                          \"Total \" +\n                          subelement +\n                          \": \" +\n                          addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"])) * element[1][\"submaterials\"][subelement])\n                        }\n                      />\n                      {/* {addIcon(\"Woodcutting\", subelement)} */}\n                    </>\n                  )}\n                </ListItem>\n              ))\n            )}\n\n            {/* Render number of inventories */}\n            {/* Render empty component if no element is selected */}\n            {element[0] === \"loading\" ? (\n              <></>\n            ) : skill === \"Crafting\" ? (\n              element[0] === \"Cursed\" || element[0] === \"Experience\" || element[0] === \"Ice\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (18 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 18))\n                    }\n                  />\n                </ListItem>\n              ) : element[0] === \"Affliction\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (35 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 35))\n                    }\n                  />\n                </ListItem>\n              ) : (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (36 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 36))\n                    }\n                  />\n                </ListItem>\n              )\n            ) : skill === \"Cooking\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Inventories (28 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 28))\n                  }\n                />\n              </ListItem>\n            ) : skill === \"Mining\" ? (\n              element[0] === \"Naturite\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (100 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 100))\n                    }\n                  />\n                </ListItem>\n              ) : (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (36 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 36))\n                    }\n                  />\n                </ListItem>\n              )\n            ) : skill === \"Woodcutting\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Inventories (28 per inventory): \" + addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 28))\n                  }\n                />\n              </ListItem>\n            ) : skill === \"Fishing\" && element[0] === \"Bass bait\" ? (\n              <>\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Total Remote Bank (34 bass per inventory): \" +\n                      addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"]) / 34))\n                    }\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Total Remote Bank price: \" +\n                      addCommas(Math.ceil((expGap / calculateElementXpBoost(element[1][\"xp\"]) / 34) * parseInt(lolliPrice) * 0.4)) +\n                      \" Gold\"\n                    }\n                  />\n                </ListItem>\n              </>\n            ) : (\n              <></>\n            )}\n          </List>\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { Box } from \"@mui/material\";\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  \"&.Mui-selected\": {\n    borderColor: \"#2e7d32\",\n    borderRadius: 9,\n  },\n  \"& .MuiToggleButtonGroup-grouped\": {\n    margin: theme.spacing(0.5),\n    borderRadius: theme.shape.borderRadius,\n    borderColor: \"#bdbdbd\",\n    \"&.Mui-disabled\": {},\n    \"&:not(:first-of-type)\": {\n      borderRadius: theme.shape.borderRadius,\n      borderColor: \"#bdbdbd\",\n    },\n    \"&:first-of-type\": {\n      borderRadius: theme.shape.borderRadius,\n      borderColor: \"#bdbdbd\",\n    },\n  },\n}));\n\n\n\nconst ToggleButtons = ({ updateElement, skillsData, skill, currentLevel }) => {\n  const [selectedElement, setSelectedElement] = React.useState();\n\n  const handleChange = (event, newElement) => {\n    if (event.currentTarget.value !== \"loading\") {\n      setSelectedElement(newElement);\n      if (newElement === null) {\n        updateElement(['loading']);\n      } else {\n        updateElement([\n          event.currentTarget.value,\n          skillsData[skill][event.currentTarget.value],\n        ]);\n      }\n    }\n  };\n\n  const createCombatButtons = (levelRange) => {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          maxWidth: 600,\n          marginBottom: 0.4,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography>Level {levelRange[0]}-{levelRange[1]}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {Object.keys(skillsData[skill]).map((attribute) =>\n              parseInt(skillsData[skill][attribute]['level']) >= levelRange[0] && parseInt(skillsData[skill][attribute]['level']) <= levelRange[1] ? (\n                <StyledToggleButtonGroup\n                  size=\"small\"\n                  value={selectedElement}\n                  exclusive\n                  onChange={handleChange}\n                  sx={{\n                    padding: 0,\n                  }}\n                >\n                  <ToggleButton\n                    value={attribute}\n                    onClick={handleChange}\n                    sx={{\n                      \"& > :not(style)\": {\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      },\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        marginRight: 0.4,\n                      }}\n                    >\n                      <img\n                        src={process.env.PUBLIC_URL + `/images/${skill}/${attribute}.gif`}\n                        width=\"22\"\n                        height=\"22\"\n                        value={attribute}\n                        alt=\"\"\n                      />\n                    </Box>\n                    {attribute}\n                  </ToggleButton>\n                </StyledToggleButtonGroup>\n              ) : (\n                <></>\n              )\n            )}\n          </AccordionDetails>\n        </Accordion>\n      </Box>\n    )\n  }\n\n  return (\n    <Box\n      sx={{\n        \"& > :not(style)\": {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          maxWidth: 450,\n          // marginBottom: 1,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        },\n      }}\n    >\n      {skillsData[skill] !== undefined ? (\n        // Custom accordion for Combat\n        skill === 'Combat' ? (\n          <Box\n            sx={{\n              marginTop: 2,\n              marginBottom: 3\n            }}\n          >\n            {createCombatButtons([1, 50])}\n            {createCombatButtons([51, 70])}\n            {createCombatButtons([71, 90])}\n            {createCombatButtons([91, 150])}\n          </Box>\n        ) : (\n          // All of other skill's buttons\n          <StyledToggleButtonGroup\n            size=\"small\"\n            value={selectedElement}\n            exclusive\n            onChange={handleChange}\n            sx={{\n              padding: 1,\n            }}\n          >\n            {Object.keys(skillsData[skill]).map((element) =>\n              currentLevel >= parseInt(skillsData[skill][element]['level']) ? (\n                <ToggleButton\n                  value={element}\n                  onClick={handleChange}\n                  sx={{\n\n                    \"& > :not(style)\": {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  <Box\n                    sx={{\n                      marginRight: 0.4,\n                    }}\n                  >\n                    <img\n                      src={process.env.PUBLIC_URL + `/images/${skill}/${element}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={element}\n                      alt=\"\"\n                    />\n                  </Box>\n                  {element}\n                </ToggleButton>\n              ) : (\n                <ToggleButton\n                  value={element}\n                  disabled\n                  sx={{\n                    \"& > :not(style)\": {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  <Box\n                    sx={{\n                      marginRight: 0.4,\n                    }}\n                  >\n                    <img\n                      src={process.env.PUBLIC_URL + `/images/${skill}/Gray ${element}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={element}\n                      alt=\"\"\n                    />\n                  </Box>\n                  {element}\n                </ToggleButton>\n              )\n            )}\n          </StyledToggleButtonGroup>\n        )) : (\n        <ToggleButton value=\"loading\" >Loading...</ToggleButton>\n      )\n      }\n    </Box >\n  );\n};\n\nexport default ToggleButtons;\n","import React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport { ToggleButton } from \"@mui/material\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  \"& .Mui-selected\": {\n    color: \"error\",\n  },\n  \"& .MuiToggleButtonGroup-grouped\": {\n    borderColor: \"#bdbdbd\",\n    \"&:not(:first-of-type)\": {\n    },\n    \"&:first-of-type\": {\n      marginLeft: theme.spacing(1),\n    },\n    \"&:last-of-type\": {\n      marginRight: theme.spacing(1),\n    },\n  },\n}));\n\nconst Boosts = ({ boosts, updateBoosts }) => {\n  const [selectedBoost, setSelectedBoost] = React.useState([]);\n\n  const handleChange = (event, boostName) => {\n    setSelectedBoost(boostName);\n    let boostsCopy = boosts;\n    for (let i = 0; i < boostsCopy.length; i++) {\n      if (boostsCopy[i].name === event.currentTarget.value) {\n        boostsCopy[i].active = !boosts[i].active;\n      }\n    }\n    updateBoosts(boostsCopy);\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          marginBottom: 1,\n          marginTop: 1,\n        }}\n      >\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={selectedBoost}\n          // exclusive\n          onChange={handleChange}\n        >\n          {boosts !== undefined ? (\n            boosts.map((boost) => (\n              <ToggleButton\n                value={boost.name}\n                sx={{\n                  \"& > :not(style)\": {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  },\n                }}\n              >\n                <Box\n                  sx={{\n                    marginRight: 0.4,\n                  }}\n                >\n                  {boost.name === 'Small or Medium Exp Pot' ? (\n                    <img\n                      src={process.env.PUBLIC_URL + `/images/Boosts/${boost.name}.gif`}\n                      width=\"27\"\n                      height=\"22\"\n                      value={boost.name}\n                      onClick={handleChange}\n                      alt=\"\"\n                    />\n                  ) : (\n                    <img\n                      src={process.env.PUBLIC_URL + `/images/Boosts/${boost.name}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={boost.name}\n                      onClick={handleChange}\n                      alt=\"\"\n                    />\n                  )}\n                </Box>\n                {boost.name +\n                  \" (+\" +\n                  Math.floor((boost.value - 1) * 100) +\n                  \"%)\"}\n              </ToggleButton>\n\n            ))\n          ) : (\n            <></>\n          )}\n        </StyledToggleButtonGroup>\n      </Box>\n    </>\n  );\n};\n\nexport default Boosts;\n","import Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\n\nconst Footer = () => {\n  return (\n    <Box component=\"footer\" sx={{ marginTop: 5, marginBottom: 2 }}>\n      <Container maxWidth=\"lg\">\n        <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\" component=\"p\">\n          Made by:{\" \"}\n          <Link color=\"inherit\" href=\"https://discordapp.com/users/kamal9365\" rel=\"noopener\" target=\"_blank\">\n            Kamal\n          </Link>\n        </Typography>\n        <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\" component=\"p\">\n          Huge thanks to:{\" \"}\n          <Link color=\"inherit\" href=\"https://discordapp.com/users/chends\" rel=\"noopener\" target=\"_blank\">\n            chends\n          </Link>\n          {\", \"}\n          the original owner of:{\" \"}\n          <Link color=\"inherit\" href=\"https://chends888.github.io/coa-calculator\" rel=\"noopener\" target=\"_blank\">\n            CoA-Calculator\n          </Link>\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          {\"All data from \"}\n          <Link color=\"inherit\" href=\"https://kaetram.com/\" rel=\"noopener\" target=\"_blank\">\n            Kaetram\n          </Link>{\" \"}\n          {new Date().getFullYear()}\n          {\".\"}\n        </Typography>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport { styled } from \"@mui/material/styles\";\n\n// const Item = styled(Paper)(({ theme }) => ({\n//   ...theme.typography.body2,\n//   padding: theme.spacing(1),\n//   textAlign: \"center\",\n//   color: theme.palette.text.secondary,\n// }));\n\nconst Div = styled(\"div\")(({ theme }) => ({\n  ...theme.typography.button,\n  //   backgroundColor: theme.palette.background.paper,\n  //   padding: theme.spacing(1),\n}));\n\nconst CustomSwitch = ({ value, updateValue, falseText, trueText, element }) => {\n  const handleChange = () => {\n    updateValue(!value);\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        // maxWidth: \"100\",\n      }}\n    >\n      <Grid\n        // component=\"label\"\n        container\n        sx={{\n          // display: \"flex\",\n          flexGrow: 1,\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginBottom: 1,\n          marginTop: 1,\n        }}\n        spacing={0}\n      >\n        <Div>{falseText}</Div>\n        <Grid item>\n          {element[0] === \"Naturite\" ? (\n            // Exception for Naturite\n            <Switch\n              checked={true}\n              disabled={true}\n              onChange={handleChange}\n              color=\"default\"\n            />\n          ) : (\n            <Switch\n              checked={!value}\n              disabled={false}\n              onChange={handleChange}\n              color=\"default\"\n            />\n          )}\n        </Grid>\n        <Div>{trueText}</Div>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CustomSwitch;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Smithing = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([]);\n  const updateBoosts = (boosts) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n  // Smelt or buy bars control\n  const [buyOrSmeltBars, setBuyOrSmeltBars] = useState(true);\n  const updateBuyOrSmeltBars = (buyOrSmeltBars) => {\n    setBuyOrSmeltBars(buyOrSmeltBars);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Smithing Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Smithing Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons updateElement={updateElement} skillsData={artisanData} skill=\"Smithing\" currentLevel={currentLevel} />\n      <CustomSwitch\n        value={buyOrSmeltBars}\n        updateValue={updateBuyOrSmeltBars}\n        element={element}\n        trueText=\"Smelt Bars\"\n        falseText=\"Buy Bars\"\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"Bars\"]}\n        boosts={boosts}\n        buyOrSmeltBars={buyOrSmeltBars}\n        skill=\"Smithing\"\n        boostsDidUpdate={boostsDidUpdate}\n      />\n      {/* <StickyHeadTable/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Smithing;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Crafting = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Crafting Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Crafting Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Crafting\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"Relics of\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Crafting\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Crafting;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Cooking = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Cooking Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Cooking Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons updateElement={updateElement} skillsData={artisanData} skill=\"Cooking\" currentLevel={currentLevel} />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Cooking\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Cooking;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Tailoring = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Tailoring Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Tailoring Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Tailoring\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Tailoring\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Tailoring;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Fletching = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Fletching Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Fletching Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons updateElement={updateElement} skillsData={artisanData} skill=\"Fletching\" currentLevel={currentLevel} />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Fletching\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Fletching;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport gatheringData from \"../data/gathering_data.json\";\n\nconst Mining = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Mining Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Mining Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons updateElement={updateElement} skillsData={gatheringData} skill=\"Mining\" currentLevel={currentLevel} />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Mining\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Mining;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport gatheringData from \"../data/gathering_data.json\";\n\nconst Woodcutting = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Your Woodcutting Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Target Woodcutting Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={gatheringData}\n        skill=\"Woodcutting\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Woodcutting\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Woodcutting;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\nimport gatheringData from \"../data/gathering_data.json\";\n\nconst Fishing = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n  // Lollipop price input, to calculate Remote Bank price\n  const [lolliPrice, setLolliPrice] = useState(0);\n  const updateLolliPrice = (lolliPrice) => {\n    setLolliPrice(lolliPrice);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  //   Select fished or baits\n  const [selectFishOrBait, setSelectFishOrBait] = useState(false);\n  const updateselectFishOrBait = (selectFishOrBait) => {\n    setSelectFishOrBait(selectFishOrBait);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Fishing Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Fishing Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      {selectFishOrBait === true ? (\n        // Render bait buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={gatheringData}\n          skill=\"Fishing-Baits\"\n          currentLevel={currentLevel}\n        />\n      ) : (\n        // Render fish buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={gatheringData}\n          skill=\"Fishing\"\n          currentLevel={currentLevel}\n        />\n      )}\n      <CustomSwitch\n        value={selectFishOrBait}\n        updateValue={updateselectFishOrBait}\n        element={element}\n        falseText=\"Fish\"\n        trueText=\"Bait\"\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      {element[0] === 'Bass bait' ? (\n        <Attribute\n          maxValue={9999999999}\n          attributeName={\"Current Lolli Price\"}\n          updateAttribute={updateLolliPrice}\n          sx={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        />\n      ) : (\n        <></>\n      )}\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Fishing\"\n        lolliPrice={lolliPrice}\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Fishing;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport Alert from '@mui/material/Alert';\n\nimport monsterData from \"../data/monsters_data.json\";\n\nconst Combat = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target monster\n  const [monster, setMonster] = useState(['loading']);\n  const updateMonster = (monster) => {\n    setMonster(monster);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Exp Relic\", value: 1.05, active: false },\n    { name: \"Small or Medium Exp Pot\", value: 1.05, active: false },\n    { name: \"Large Exp Pot\", value: 1.1, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Alert severity=\"info\">Missing or bugged icons will be updated once new sprites are released</Alert>\n\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Combat Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Combat Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateMonster}\n        skillsData={monsterData}\n        skill=\"Combat\"\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={monster}\n        boosts={boosts}\n        keywords={[\"\"]}\n        skill=\"Combat\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Combat;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Alchemy = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Alchemy Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Alchemy Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons updateElement={updateElement} skillsData={artisanData} skill=\"Alchemy\" currentLevel={currentLevel} />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Alchemy\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Alchemy;\n","import React from \"react\";\n\nimport { Tabs, Tab, Box } from \"@mui/material\";\n// import { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nimport Header from \"./components/Header\";\nimport Smithing from \"./tabs/Smithing\";\nimport Crafting from \"./tabs/Crafting\";\nimport Cooking from \"./tabs/Cooking\";\nimport Tailoring from \"./tabs/Tailoring\";\nimport Fletching from \"./tabs/Fletching\";\nimport Mining from \"./tabs/Mining\";\nimport Woodcutting from \"./tabs/Woodcutting\";\nimport Fishing from \"./tabs/Fishing\";\nimport Combat from \"./tabs/Combat\";\nimport Alchemy from \"./tabs/Alchemy\";\n\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst Home = (props) => {\n  const { match, history, currentTheme, updateCurrentTheme } = props;\n  const { params } = match;\n  const { page } = params;\n  // const currTheme = currentTheme;\n  // console.log('Current theme', currentTheme);\n\n  const tabNameToIndex = {\n    0: \"smithing\",\n    1: \"crafting\",\n    2: \"cooking\",\n    3: \"tailoring\",\n    4: \"mining\",\n    5: \"woodcutting\",\n    6: \"fishing\",\n    7: \"combat\",\n  };\n\n  const indexToTabName = {\n    smithing: 0,\n    crafting: 1,\n    cooking: 2,\n    tailoring: 3,\n    mining: 4,\n    woodcutting: 5,\n    fishing: 6,\n    combat: 7,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState(indexToTabName[page]);\n\n  const handleChange = (event, newValue) => {\n    console.log(newValue);\n    history.push(`/${tabNameToIndex[newValue]}`);\n    setSelectedTab(newValue);\n  };\n\n  // const [currentTheme, setCurrentTheme] = useState(\"dark\");\n  // const updateCurrentTheme = () => {\n  //   if (currentTheme === \"dark\") {\n  //     setCurrentTheme(\"light\");\n  //   } else {\n  //     setCurrentTheme(\"dark\");\n  //   }\n  // };\n\n  // const theme = createTheme({\n  //   palette: {\n  //     mode: currentTheme,\n  //   },\n  // });\n\n  return (\n    <>\n      <Header title=\"Kaetram Skills Calculator\" updateTheme={updateCurrentTheme} currentTheme={currentTheme} />\n      <Box sx={{ width: \"100%\" }}>\n        <Box sx={{ borderBottom: 1, borderColor: \"divider\", marginBottom: 1 }}>\n          <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            variant=\"scrollable\"\n            // scrollButtons={false}\n          >\n            <Tab label=\"Smithing\" />\n            <Tab label=\"Crafting\" />\n            <Tab label=\"Cooking\" />\n            <Tab label=\"Tailoring\" />\n            <Tab label=\"Fletching\" />\n            <Tab label=\"Mining\" />\n            <Tab label=\"Woodcutting\" />\n            <Tab label=\"Fishing\" />\n            <Tab label=\"Combat\" />\n            <Tab label=\"Alchemy\" />\n          </Tabs>\n          {/* <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            variant=\"scrollable\"\n          >\n          <Tab label=\"Combat\"/>\n          </Tabs> */}\n        </Box>\n      </Box>\n      {selectedTab === 0 && <Smithing />}\n      {selectedTab === 1 && <Crafting />}\n      {selectedTab === 2 && <Cooking />}\n      {selectedTab === 3 && <Tailoring />}\n      {selectedTab === 4 && <Fletching />}\n      {selectedTab === 5 && <Mining />}\n      {selectedTab === 6 && <Woodcutting />}\n      {selectedTab === 7 && <Fishing />}\n      {selectedTab === 8 && <Combat />}\n      {selectedTab === 9 && <Alchemy />}\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport HttpsRedirect from \"react-https-redirect\";\n\nconst App = ({ currentTheme, updateCurrentTheme }) => {\n\n  return (\n    <HttpsRedirect>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/smithing\" />\n        <Route\n          exact\n          path=\"/:page?\"\n          render={(props) => (\n            <Home\n              {...props}\n              currentTheme={currentTheme}\n              updateCurrentTheme={updateCurrentTheme}\n            />\n          )}\n        />\n      </Switch>\n    </HttpsRedirect>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nlet currentTheme = \"dark\";\nconst theme = createTheme({\n  palette: {\n    mode: currentTheme,\n  },\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}